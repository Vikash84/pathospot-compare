require 'rubygems'
require 'bundler/setup'
require 'shellwords'
require_relative '../lib/pathogendb_client'
require_relative '../lib/pathogendb_creator'

task :default => [:example]

IN_QUERY = ENV['IN_QUERY']
PATHOGENDB_URI = ENV['PATHOGENDB_URI'] == 'user:pass@host' ? nil : ENV['PATHOGENDB_URI']
PATHOGENDB_ADAPTER = ENV['PATHOGENDB_ADAPTER']
IGB_DIR = ENV['IGB_DIR']
KEYFILES_PREFIX = ENV['KEYFILES_PREFIX']
SRAND = ENV['SRAND'] =~ /^\d+$/ ? ENV['SRAND'].to_i : nil

if IN_QUERY
  abort "FATAL: IN_QUERY requires also specifying PATHOGENDB_URI" unless PATHOGENDB_URI
  abort "FATAL: IN_QUERY requires also specifying IGB_DIR" unless IGB_DIR
  pdb = PathogenDBClient.new(PATHOGENDB_URI, adapter: PATHOGENDB_ADAPTER)
  IN_PATHS = pdb.assembly_paths(IGB_DIR, IN_QUERY)
end

#############################################################
#  IMPORTANT!
#  This Rakefile runs with the working directory as the parent of this Rakefile
#     (unlike the main Rakefile, which uses the value of the OUT environment variable)
#  All filenames from hereon are relative to that directory
#############################################################
Dir.chdir(File.dirname(__FILE__))

desc "Builds the example dataset in mrsa.db. Default task."
task :example => ["mrsa.tar.gz"]

file "mrsa.tar.gz" => ["mrsa.db", :igb_dir] do |t|
  $stderr.puts "Compressing files into mrsa.tar.gz..."
  system "tar -czf mrsa.tar.gz mrsa.db igb" or abort
end

file "mrsa.db" do |t|
  abort "FATAL: building mrsa.db requires IN_QUERY" unless IN_QUERY
  assemblies = pdb.assemblies(IN_QUERY)
  isolates = pdb.isolates(IN_QUERY)
  
  mrsa_db = PathogenDBCreator.new("sqlite://mrsa.db", srand: SRAND)
  mrsa_db.copy_tables_for_assemblies!(assemblies)
  mrsa_db.copy_isolates!(isolates)
  
  mrsa_db.deidentify!(KEYFILES_PREFIX)
end

## Copy IN_PATHS (at the very least, the .fasta and .bed files) to ./igb 
## to provide the example set of MRSA genomes

IN_PATHS.each do |f|
  fasta_path = f[IGB_DIR.size..-1].sub(/^\//, '')
  bed_path = fasta_path.sub(/\.fasta$/, '.bed')
  directory "igb/#{File.dirname(fasta_path)}"
  task :igb_dir => "igb/#{fasta_path}"
  task :igb_dir => "igb/#{bed_path}"
end

rule ".fasta" => proc{ |f| File.dirname(f) } do |t|
  cp "#{IGB_DIR}/#{t.name[4..-1]}", t.name
end
rule ".bed" => proc{ |f| File.dirname(f) } do |t|
  cp "#{IGB_DIR}/#{t.name[4..-1]}", t.name
end